version: 2.1
orbs:
  node: circleci/node@5.0.2
  slack: circleci/slack@4.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
              aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
              aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
       - checkout
       - restore_cache:
          keys: [frontend-build]
       - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
       - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    executor:
      name: node/default
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run frontend test
          command: |
             cd frontend
             npm install
             npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run backend test
          command: |
             cd backend
             npm install
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run scan frontend
          command: |
             cd frontend
             npm install
             npm audit fix --audit-level=critical --force
             npm audit --audit-level=critical
      - slack/notify:
         channel: C03SB51EQUU
         event: fail
         template: basic_fail_1

  scan-backend:
    docker:
       - image: circleci/node:13.8.0
    steps:
     - checkout
     - restore_cache:
         keys: [backend-build]
     - run:
         name: Run scan backend
         command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical

     - slack/notify:
        channel: C03SB51EQUU
        event: fail
        template: basic_fail_1
  deploy-infrastructure:
    docker:
       - image: amazon/aws-cli
    steps:
     - checkout
     - run:
        name: Install tar utility
        command: |
            yum install -y tar gzip
     - run:
        name: Ensure back-end infrastructure exists
        command: |
          aws cloudformation deploy \
            --template-file .circleci/files/backend.yml \
            --tags project=udapeople \
            --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
     - run:
        name: Ensure front-end infrastructure exist
        command: |
          aws cloudformation deploy \
            --template-file .circleci/files/frontend.yml \
            --tags project=udapeople \
            --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
     - run:
        name: Add back-end ip to ansible inventory
        command: |
          aws ec2 describe-instances \
             --query 'Reservations[*].Instances[*].PublicIpAddress' \
             --filters "Name=tag:project,Values=udapeople" \
             --output text >> .circleci/ansible/inventory.txt
     - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt

     - destroy-environment

  configure-infrastructure:
     docker:
        - image: python:3.7-alpine3.11
     steps:
       - checkout
       - add_ssh_keys:
           fingerprints: ["80:93:59:44:39:72:59:b5:3d:17:2f:df:d9:17:32:76"]
       - attach_workspace:
           at: ~/
       - run:
           name: Install AWS CLI
           command: |
             python -m pip install awscli
       - run:
           name: Install dependencies
           command: |
             apk add --update ansible
       - run:
           name: Configure server
           command: |
             ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
       - destroy-environment
  run-migrations:
      docker:
        - image: circleci/node:13.8.0
          user : root
      steps:
        - checkout
        - run:
            name: Install AWS CLI
            command: |
               apt-get update
               apt -y install awscli
        - run:
            name: Run migrations
            command: |
               cd backend
               npm install
               npm run migrations > migrations_dump.txt
        - run:
            name: Send migration results to memstash
            command: |
              if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
                then
                    curl https://kvdb.io/274gcFWLnSq2HsfR2Jt3mr/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
                fi
        - destroy-environment
  deploy-frontend:
      docker:
        - image: circleci/node:13.8.0
          user: root
      steps:
        - checkout
        - run:
            name: Install AWS CLI
            command: |
               apt-get update
               apt -y install awscli
        - run:
            name: Get backend url
            command: |
              export BACKEND_IP=$(aws ec2 describe-instances \
               --query 'Reservations[*].Instances[*].PublicIpAddress' \
               --filters "Name=tag:project,Values=udapeople" \
               --output text)
              export API_URL="http://${BACKEND_IP}:3030"
              echo "${API_URL}"
              echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
              cat frontend/.env
        - run:
            name: Deploy frontend objects
            command: |
              cd frontend
              npm install
              npm run build
              tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
              aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
        - destroy-environment
  deploy-backend:
      docker:
         - image: circleci/node:13.8.0
      steps:
        - checkout
        - add_ssh_keys:
            fingerprints: ["80:93:59:44:39:72:59:b5:3d:17:2f:df:d9:17:32:76"]
        - attach_workspace:
            at: ~/
        - run:
            name: Install AWS CLI
            command: |
               sudo apt-get update
               sudo apt -y install awscli
        - run:
            name: install python
            command: |
              sudo apt-get install python -y
              sudo apt install python3-pip
        - run:
            name: Install ansible
            command: |
               sudo apt-get install ansible -y
        - run:
            name: Install tar utility
            command: |
               sudo apt-get install tar gzip -y
        - run:
            name: Deploy backend
            command: |
              cd backend
              npm i
              npm run build
              cd ..
              tar -C backend -czvf artifact.tar.gz .
              cd .circleci/ansible
              echo "Contents  of the inventory.txt file is -------"
              cat inventory.txt
              ansible-playbook -i inventory.txt deploy-backend.yml
        - destroy-environment
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
          context:
            - slack-secrets
      - scan-frontend:
          requires: [build-frontend]
          context:
            - slack-secrets
      - deploy-infrastructure:
          requires: [test-frontend, test-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
